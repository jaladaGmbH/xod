using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Xml.Linq;

namespace Xod.Services
{
    internal class IndexService
    {
        //private static readonly object locker = new object();
        //private static Dictionary<string, List<IndexRange>> index { get; set; }

        private PropertyService propertyService = null;

        internal IndexService(PropertyService propertyService)
        {
            this.propertyService = propertyService;

            //if (index == null)
            //{
            //    lock(locker)
            //    {
            //        if (index == null)
            //            index = new Dictionary<string, List<IndexRange>>();
            //    }
            //}
        }

        internal Dictionary<string, dynamic> Index(Type type, Dictionary<string, dynamic> autonumbers, XElement page)
        {
            //string pageFile = page.Attribute("file").Value;
            //if (!index.ContainsKey(pageFile))
            //    return null;

            var props = this.propertyService.Properties(type.FullName).Where(s => autonumbers.ContainsKey(s.PropertyName));
            //lock (locker)
            //{
                foreach (var prop in props)
                {
                    var seed = prop.IdentitySeed;
                    var incr = prop.IdentityIncrement;
                    var value = autonumbers[prop.PropertyName];
                    bool guid = prop.PropertyType == typeof(Guid);
                    
                    XElement indexElm = null;
                    bool createElm = !page.HasElements;
                    if (createElm)
                    {
                        indexElm = new XElement("Index", new XAttribute("property", prop.PropertyName));
                        page.Add(indexElm);
                    }
                    else
                    {
                        indexElm = page.Elements().FirstOrDefault(s => s.Name.LocalName == "Index" && s.Attribute("property").Value == prop.PropertyName);
                    }

                    if (guid)
                    {
                        string initial = "a"; //autogenerated
                        string newValue = initial + value.ToString().Substring(0, initial.Length);
                        value = new Guid(newValue);
                        autonumbers[prop.PropertyName] = value;
                        var patternAttr = indexElm.Attribute("pattern");
                        if (patternAttr != null)
                            patternAttr.Value = initial;
                        else
                            indexElm.Add(new XAttribute("pattern", initial));
                    }
                    else
                    {
                        var endsAttr = indexElm.Attribute("ends");
                        if (endsAttr != null)
                            endsAttr.Value = value.ToString();
                        else
                        {
                            indexElm.Add(new XAttribute("ends", value));
                        }
                    }
                }

                return autonumbers;
            //}
        }

        private void Create(Type type, Dictionary<string, dynamic> autonumbers, XElement page)
        {
            throw new NotImplementedException();
        }

        internal void Remove(Type type)
        {
            //lock (index)
            //{
            //    var keys = index.Where(s =>
            //        s.Value.Where(r => r.Type.Equals(type)).Any()).Select(s=> s.Key)
            //        .ToArray();
            //    foreach(var key in keys)
            //    {
            //        index.Remove(key);

            //        //remove from .xpag file...
            //    }
            //}
        }
    }
}
